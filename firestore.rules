rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rate limiting: máximo 10 operações por minuto por IP
    function rateLimited() {
      return request.time > resource.data.lastRequest + duration.value(6, 's');
    }
    
    // Verificar se usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar se é o próprio usuário
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Limitar tamanho dos documentos (máximo 1MB)
    function isValidSize() {
      return request.resource.size < 1000000;
    }
    
    // Usuários podem ler e escrever apenas seus próprios dados
    match /users/{userId} {
      allow read: if true; // Perfis são públicos para leitura
      allow write: if isOwner(userId) && isValidSize();
      
      // Subcoleção de presentes - limitada
      match /gifts/{giftId} {
        allow read: if true; // Presentes são públicos
        allow write: if isOwner(userId) && isValidSize();
        // Máximo 50 presentes por usuário
        allow create: if isOwner(userId) && 
          request.resource.data.keys().hasAll(['name', 'price']) &&
          request.resource.data.name is string &&
          request.resource.data.name.size() <= 100 &&
          request.resource.data.price is number &&
          request.resource.data.price >= 0 &&
          request.resource.data.price <= 999999;
      }
    }
    
    // Usernames são públicos para leitura, mas controlados para escrita
    match /usernames/{username} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        (resource == null || request.auth.uid == resource.data.uid) &&
        username.size() >= 3 && username.size() <= 30 &&
        username.matches('[a-zA-Z0-9_-]+');
    }
    
    // Rate limiting collection (para tracking)
    match /rate_limits/{ip} {
      allow read, write: if isAuthenticated();
    }
  }
}
